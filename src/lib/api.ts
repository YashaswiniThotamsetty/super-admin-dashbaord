
import { getAccessToken, getRefreshToken, setAuthTokens, clearTokens } from './auth';

const API_URL = 'https://sasyakapi.kapilagro.com/api';

export interface LoginCredentials {
  email: string;
  password: string;
}

interface AuthResponse {
  accessToken: string;
  refreshToken: string;
  email: string;
  name: string;
  userId: number;
}

interface RefreshTokenRequest {
  refreshToken: string;
}

interface RefreshTokenResponse {
  accessToken: string;
  refreshToken: string;
}

export interface Tenant {
  id: string;
  companyName: string;
  contactEmail: string;
  createdAt?: string;
}

export interface TenantCreationResponse {
  message: string;
  tenant: {
    id: string;
    companyName: string;
    contactEmail: string;
  };
  adminUser: {
    id: number;
    name: string;
    email: string;
    autogeneratedPassword: string;
  };
}

export interface NewTenant {
  companyName: string;
  contactEmail: string;
  adminName: string;
  adminEmail: string;
  role?: string;
}

export async function login(credentials: LoginCredentials): Promise<AuthResponse> {
  try {
    const response = await fetch(`${API_URL}/auth/superadmin/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(credentials),
    });

    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Login failed');
    }

    const data: AuthResponse = await response.json();
    setAuthTokens(data.accessToken, data.refreshToken);
    return data;
  } catch (error) {
    console.error('Login error:', error);
    throw error;
  }
}

export async function refreshToken(): Promise<boolean> {
  try {
    const refreshToken = getRefreshToken();
    if (!refreshToken) {
      return false;
    }

    const response = await fetch(`${API_URL}/auth/refresh-token`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ refreshToken }),
    });

    if (!response.ok) {
      clearTokens();
      return false;
    }

    const data: RefreshTokenResponse = await response.json();
    setAuthTokens(data.accessToken, data.refreshToken);
    return true;
  } catch (error) {
    console.error('Refresh token error:', error);
    clearTokens();
    return false;
  }
}

export async function fetchWithAuth(url: string, options: RequestInit = {}): Promise<Response> {
  let accessToken = getAccessToken();
  
  // Set up headers with access token
  const headers = {
    ...options.headers,
    'Authorization': `Bearer ${accessToken}`,
    'Content-Type': 'application/json',
  };

  // Make the initial request
  let response = await fetch(url, { ...options, headers });

  // If unauthorized, attempt to refresh the token and retry
  if (response.status === 401) {
    const refreshed = await refreshToken();
    if (refreshed) {
      // Retry with new token
      accessToken = getAccessToken();
      headers['Authorization'] = `Bearer ${accessToken}`;
      response = await fetch(url, { ...options, headers });
    }
  }

  return response;
}

export async function getTenants(): Promise<Tenant[]> {
  try {
    const response = await fetchWithAuth(`${API_URL}/tenants`);
    
    if (!response.ok) {
      throw new Error('Failed to fetch tenants');
    }
    
    const data = await response.json();
    return data.tenants;
  } catch (error) {
    console.error('Error fetching tenants:', error);
    throw error;
  }
}

export async function createTenant(tenantData: NewTenant): Promise<TenantCreationResponse> {
  try {
    const response = await fetchWithAuth(`${API_URL}/tenants`, {
      method: 'POST',
      body: JSON.stringify(tenantData),
    });
    
    if (!response.ok) {
      const error = await response.json();
      throw new Error(error.message || 'Failed to create tenant');
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error creating tenant:', error);
    throw error;
  }
}
