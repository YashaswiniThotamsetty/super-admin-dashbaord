
import { useState } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { Loader2, Plus } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useToast } from "@/components/ui/use-toast";
import { createTenant, TenantCreationResponse, NewTenant } from "@/lib/api";

const tenantSchema = z.object({
  companyName: z.string().min(2, "Company name is required"),
  contactEmail: z.string().email("Valid contact email is required"),
  adminName: z.string().min(2, "Admin name is required"),
  adminEmail: z.string().email("Valid admin email is required"),
});

type TenantFormValues = z.infer<typeof tenantSchema>;

interface TenantDialogProps {
  onTenantCreated: () => void;
}

export function AddTenantDialog({ onTenantCreated }: TenantDialogProps) {
  const [open, setOpen] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [createdTenant, setCreatedTenant] = useState<TenantCreationResponse | null>(null);
  const { toast } = useToast();

  const form = useForm<TenantFormValues>({
    resolver: zodResolver(tenantSchema),
    defaultValues: {
      companyName: "",
      contactEmail: "",
      adminName: "",
      adminEmail: "",
    },
  });

  const onSubmit = async (values: TenantFormValues) => {
    setIsSubmitting(true);
    try {
      // Create a properly typed NewTenant object
      const tenantData: NewTenant = {
        companyName: values.companyName,
        contactEmail: values.contactEmail,
        adminName: values.adminName,
        adminEmail: values.adminEmail,
        role: "ADMIN" // Optional field
      };
      
      const response = await createTenant(tenantData);
      setCreatedTenant(response);
      form.reset();
      toast({
        title: "Success!",
        description: "Tenant has been created successfully",
      });
      onTenantCreated();
    } catch (error) {
      toast({
        title: "Error",
        description: error instanceof Error ? error.message : "Failed to create tenant",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    setOpen(false);
    setCreatedTenant(null);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button className="gap-2">
          <Plus className="h-4 w-4" />
          <span>Add Tenant</span>
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[500px]">
        {createdTenant ? (
          <>
            <DialogHeader>
              <DialogTitle>Tenant Created Successfully</DialogTitle>
              <DialogDescription>
                The tenant has been created and the admin account is now active.
              </DialogDescription>
            </DialogHeader>
            <div className="py-4 space-y-4">
              <div className="bg-muted p-4 rounded-md">
                <h3 className="font-medium mb-2">Tenant Details</h3>
                <p><span className="font-semibold">Company:</span> {createdTenant.tenant.companyName}</p>
                <p><span className="font-semibold">Contact:</span> {createdTenant.tenant.contactEmail}</p>
              </div>
              <div className="bg-muted p-4 rounded-md">
                <h3 className="font-medium mb-2">Admin Account</h3>
                <p><span className="font-semibold">Name:</span> {createdTenant.adminUser.name}</p>
                <p><span className="font-semibold">Email:</span> {createdTenant.adminUser.email}</p>
                <div className="mt-2 p-3 border border-accent bg-accent/10 rounded-md">
                  <p className="text-sm text-center">
                    The generated password <span className="font-mono font-bold">{createdTenant.adminUser.autogeneratedPassword}</span> has been sent to the admin's email.
                  </p>
                </div>
              </div>
            </div>
            <DialogFooter>
              <Button onClick={handleClose}>Close</Button>
            </DialogFooter>
          </>
        ) : (
          <>
            <DialogHeader>
              <DialogTitle>Add New Tenant</DialogTitle>
              <DialogDescription>
                Fill out the form below to create a new tenant and admin account.
              </DialogDescription>
            </DialogHeader>
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 py-4">
                <FormField
  control={form.control}
  name="companyName"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Company Name</FormLabel>
      <FormControl>
        <Input placeholder="Enter company name" {...field} />
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>

<FormField
  control={form.control}
  name="contactEmail"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Company Contact Email</FormLabel>
      <FormControl>
        <Input placeholder="Enter company contact email" type="email" {...field} />
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>

<FormField
  control={form.control}
  name="adminName"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Admin Name</FormLabel>
      <FormControl>
        <Input placeholder="Enter admin full name" {...field} />
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>

<FormField
  control={form.control}
  name="adminEmail"
  render={({ field }) => (
    <FormItem>
      <FormLabel>Admin Email</FormLabel>
      <FormControl>
        <Input placeholder="Enter admin email" type="email" {...field} />
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>
      <DialogFooter className="pt-4">
                  <Button type="button" variant="outline" onClick={handleClose}>
                    Cancel
                  </Button>
                  <Button type="submit" disabled={isSubmitting}>
                    {isSubmitting ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Creating...
                      </>
                    ) : (
                      "Create Tenant"
                    )}
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </>
        )}
      </DialogContent>
    </Dialog>
  );
}
